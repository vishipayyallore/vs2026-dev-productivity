@page "/weather"
@attribute [StreamRendering]
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@using System.Security.Cryptography
@using AspireApp.SharedLib.Models
@using System.Text.Json

<PageTitle>Weather - VS2026 Dev Productivity</PageTitle>

<div class="weather-container">
    <div class="row justify-content-center">
        <div class="col-lg-10 col-xl-8">
            <div class="text-center mb-5">
                <h1 class="display-4 fw-bold text-primary mb-3">
                    <i class="bi bi-cloud-sun me-3"></i>
                    Weather Forecast
                </h1>
                <p class="lead text-muted">
                    5-day weather forecast with real-time data from our weather service
                </p>
            </div>

            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary mb-3" style="width: 3rem; height: 3rem;" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="text-muted">Fetching latest weather data...</p>
                </div>
            }
            else if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-warning d-flex align-items-center" role="alert">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    <div>
                        <strong>Weather Service Unavailable:</strong> @errorMessage
                        <br />
                        <small class="text-muted">Showing sample data instead.</small>
                    </div>
                </div>
            }

            @if (forecasts != null)
            {
                <div class="weather-cards">
                    <div class="row g-4">
                        @foreach (var (forecast, index) in forecasts.Select((f, i) => (f, i)))
                        {
                            <div class="col-lg-4 col-md-6">
                                <div class="weather-card @(index == 0 ? "today" : "")">
                                    <div class="weather-header">
                                        <div class="date-info">
                                            <div class="day-name">@forecast.Date.ToString("dddd")</div>
                                            <div class="date">@forecast.Date.ToString("MMM dd")</div>
                                            @if (index == 0)
                                            {
                                                <span class="today-badge">Today</span>
                                            }
                                        </div>
                                        <div class="weather-icon">
                                            <i class="@GetWeatherIcon(forecast.Summary ?? "cloudy")"></i>
                                        </div>
                                    </div>
                                    
                                    <div class="temperature-display">
                                        <div class="main-temp">@forecast.TemperatureC°</div>
                                        <div class="temp-unit">Celsius</div>
                                        <div class="temp-alt">(@forecast.TemperatureF°F)</div>
                                    </div>
                                    
                                    <div class="weather-summary">
                                        <div class="summary-text">@forecast.Summary</div>
                                        <div class="summary-details">
                                            <small class="text-muted">
                                                Feels like @(forecast.TemperatureC + GetSecureRandomInt(-3, 4))°C
                                            </small>
                                        </div>
                                    </div>
                                    
                                    <div class="weather-details">
                                        <div class="detail-item">
                                            <i class="bi bi-droplet text-info"></i>
                                            <span>@GetSecureRandomInt(30, 90)%</span>
                                            <small>Humidity</small>
                                        </div>
                                        <div class="detail-item">
                                            <i class="bi bi-wind text-success"></i>
                                            <span>@GetSecureRandomInt(5, 25) km/h</span>
                                            <small>Wind</small>
                                        </div>
                                        <div class="detail-item">
                                            <i class="bi bi-eye text-warning"></i>
                                            <span>@GetSecureRandomInt(1, 15) km</span>
                                            <small>Visibility</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                
                <div class="weather-actions text-center mt-5">
                    <button class="btn btn-primary btn-lg" @onclick="RefreshWeather" disabled="@isLoading">
                        <i class="bi bi-arrow-clockwise me-2"></i>
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        Refresh Forecast
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .weather-container {
        padding: 2rem 0;
        min-height: calc(100vh - 3.5rem);
    }
    
    .weather-card {
        background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
        border-radius: 1.25rem;
        padding: 1.5rem;
        color: white;
        box-shadow: 0 8px 32px rgba(116, 185, 255, 0.3);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .weather-card.today {
        background: linear-gradient(135deg, #fd79a8 0%, #e84393 100%);
        box-shadow: 0 8px 32px rgba(253, 121, 168, 0.3);
        transform: scale(1.02);
    }
    
    .weather-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="weatherPattern" width="20" height="20" patternUnits="userSpaceOnUse"><circle cx="10" cy="10" r="1.5" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23weatherPattern)"/></svg>') repeat;
        opacity: 0.4;
        pointer-events: none;
    }
    
    .weather-card:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 12px 40px rgba(116, 185, 255, 0.4);
    }
    
    .weather-card.today:hover {
        box-shadow: 0 12px 40px rgba(253, 121, 168, 0.4);
    }
    
    .weather-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 1.5rem;
        position: relative;
        z-index: 2;
    }
    
    .day-name {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 0.25rem;
    }
    
    .date {
        font-size: 0.9rem;
        opacity: 0.8;
    }
    
    .today-badge {
        background: rgba(255, 255, 255, 0.2);
        border-radius: 1rem;
        padding: 0.25rem 0.75rem;
        font-size: 0.75rem;
        font-weight: 500;
        margin-top: 0.5rem;
        display: inline-block;
    }
    
    .weather-icon {
        font-size: 3rem;
        opacity: 0.9;
    }
    
    .temperature-display {
        text-align: center;
        margin-bottom: 1.5rem;
        position: relative;
        z-index: 2;
    }
    
    .main-temp {
        font-size: 3.5rem;
        font-weight: 700;
        line-height: 1;
        margin-bottom: 0.25rem;
    }
    
    .temp-unit {
        font-size: 0.9rem;
        opacity: 0.8;
        font-weight: 500;
    }
    
    .temp-alt {
        font-size: 0.85rem;
        opacity: 0.7;
        margin-top: 0.25rem;
    }
    
    .weather-summary {
        text-align: center;
        margin-bottom: 1.5rem;
        position: relative;
        z-index: 2;
    }
    
    .summary-text {
        font-size: 1.1rem;
        font-weight: 500;
        margin-bottom: 0.5rem;
    }
    
    .weather-details {
        display: flex;
        justify-content: space-around;
        border-top: 1px solid rgba(255, 255, 255, 0.2);
        padding-top: 1rem;
        position: relative;
        z-index: 2;
    }
    
    .detail-item {
        text-align: center;
        flex: 1;
    }
    
    .detail-item i {
        display: block;
        font-size: 1.2rem;
        margin-bottom: 0.25rem;
    }
    
    .detail-item span {
        display: block;
        font-weight: 600;
        font-size: 0.9rem;
        margin-bottom: 0.125rem;
    }
    
    .detail-item small {
        font-size: 0.75rem;
        opacity: 0.8;
    }
    
    .weather-actions {
        margin-top: 3rem;
    }
</style>

@code {
    private WeatherForecast[]? forecasts;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadWeatherData();
    }

    private async Task LoadWeatherData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            StateHasChanged();

            // Try to get weather data from API first
            try
            {
                var response = await HttpClient.GetAsync("/api/weather");
                if (response.IsSuccessStatusCode)
                {
                    var json = await response.Content.ReadAsStringAsync();
                    var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                    forecasts = JsonSerializer.Deserialize<WeatherForecast[]>(json, options);
                }
                else
                {
                    throw new HttpRequestException($"API returned {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"API unavailable ({ex.Message})";
                await GenerateSampleData();
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GenerateSampleData()
    {
        // Simulate loading delay
        await Task.Delay(300);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Sunny", "Partly Cloudy", "Cloudy", "Rainy", "Stormy", "Snowy", "Foggy", "Windy", "Hot", "Cool" };
        
        forecasts = Enumerable.Range(0, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = GetSecureRandomInt(-5, 35),
            Summary = summaries[GetSecureRandomInt(0, summaries.Length)]
        }).ToArray();
    }

    private async Task RefreshWeather()
    {
        await LoadWeatherData();
    }

    private static string GetWeatherIcon(string summary)
    {
        return summary.ToLower() switch
        {
            "sunny" or "hot" => "bi bi-sun-fill text-warning",
            "partly cloudy" => "bi bi-cloud-sun-fill text-info",
            "cloudy" => "bi bi-clouds-fill text-secondary",
            "rainy" => "bi bi-cloud-rain-fill text-primary",
            "stormy" => "bi bi-cloud-lightning-rain-fill text-danger",
            "snowy" => "bi bi-cloud-snow-fill text-light",
            "foggy" => "bi bi-cloud-fog-fill text-muted",
            "windy" => "bi bi-wind text-success",
            "cool" => "bi bi-thermometer-half text-info",
            _ => "bi bi-cloud-fill text-secondary"
        };
    }

    private static int GetSecureRandomInt(int minValue, int maxValue)
    {
        return RandomNumberGenerator.GetInt32(minValue, maxValue);
    }
}
